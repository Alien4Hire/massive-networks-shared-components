{"version":3,"mappings":"2EAAA,MAAMA,GAAY,OAUlB,IAAIC,EACAC,EACAC,EAAY,GACZC,EAAe,GACnB,MAAMC,EAAa,CAACC,EAAQC,EAAU,KAEvB,IAAM,CAErB,EAGMC,GAAa,CAACC,EAAKC,IAEV,IAAM,CAErB,EAGMC,GAAe,mDAQfC,EAAY,GACZC,GAASC,GAAMA,GAAK,KAQpBC,EAAiBC,IAEnBA,EAAI,OAAOA,EACJA,IAAM,UAAYA,IAAM,YAUnC,SAASC,EAAyBC,EAAK,CACnC,IAAIC,EAAIC,EAAIC,EACZ,OAAQA,GAAMD,GAAMD,EAAKD,EAAI,QAAU,MAAQC,IAAO,OAAS,OAASA,EAAG,cAAc,wBAAwB,KAAO,MAAQC,IAAO,OAAS,OAASA,EAAG,aAAa,SAAS,KAAO,MAAQC,IAAO,OAASA,EAAK,MAC1N,CAWA,MAAMC,EAAI,CAACC,EAAUC,KAAcC,IAAa,CAC5C,IAAIC,EAAQ,KACRC,EAAS,GACTC,EAAa,GACjB,MAAMC,EAAgB,GAChBC,EAAQ,GAAM,CAChB,QAASC,EAAI,EAAGA,EAAI,EAAE,OAAQA,IAC1BL,EAAQ,EAAEK,CAAC,EACP,MAAM,QAAQL,CAAK,EACnBI,EAAKJ,CAAK,EAELA,GAAS,MAAQ,OAAOA,GAAU,aAClCC,EAAS,OAAOJ,GAAa,YAAc,CAACR,EAAcW,CAAK,KAChEA,EAAQ,OAAOA,CAAK,GAEpBC,GAAUC,EAEVC,EAAcA,EAAc,OAAS,CAAC,EAAE,QAAUH,EAIlDG,EAAc,KAAKF,EAASK,EAAS,KAAMN,CAAK,EAAIA,CAAK,EAE7DE,EAAaD,EAG7B,EAEI,GADAG,EAAKL,CAAQ,EACTD,EAEA,CACI,MAAMS,EAAYT,EAAU,WAAaA,EAAU,MAC/CS,IACAT,EAAU,MACN,OAAOS,GAAc,SACfA,EACA,OAAO,KAAKA,CAAS,EAClB,OAAQC,GAAMD,EAAUC,CAAC,CAAC,EAC1B,KAAK,GAAG,EAE5B,CAEL,GAAI,OAAOX,GAAa,WAEpB,OAAOA,EAASC,IAAc,KAAO,CAAE,EAAGA,EAAWK,EAAeM,EAAW,EAEnF,MAAMC,EAAQJ,EAAST,EAAU,IAAI,EACrC,OAAAa,EAAM,QAAUZ,EACZK,EAAc,OAAS,IACvBO,EAAM,WAAaP,GAEhBO,CACX,EASMJ,EAAW,CAACK,EAAKC,IAAS,CAC5B,MAAMF,EAAQ,CACV,QAAS,EACT,MAAOC,EACP,OAAQC,EACR,MAAO,KACP,WAAY,IACpB,EAEQ,OAAAF,EAAM,QAAU,KAEbA,CACX,EACMG,GAAO,GAOPC,GAAUC,GAASA,GAAQA,EAAK,QAAUF,GAQ1CJ,GAAc,CAChB,QAAS,CAACV,EAAUiB,IAAOjB,EAAS,IAAIkB,CAAe,EAAE,QAAQD,CAAE,EACnE,IAAK,CAACjB,EAAUiB,IAAOjB,EAAS,IAAIkB,CAAe,EAAE,IAAID,CAAE,EAAE,IAAIE,EAAgB,CACrF,EAQMD,EAAmBF,IAAU,CAC/B,OAAQA,EAAK,QACb,UAAWA,EAAK,WAChB,KAAMA,EAAK,MACX,MAAOA,EAAK,OACZ,KAAMA,EAAK,MACX,MAAOA,EAAK,MAChB,GAUMG,GAAoBH,GAAS,CAC/B,GAAI,OAAOA,EAAK,MAAS,WAAY,CACjC,MAAMjB,EAAY,OAAO,OAAO,GAAIiB,EAAK,MAAM,EAC/C,OAAIA,EAAK,OACLjB,EAAU,IAAMiB,EAAK,MAErBA,EAAK,QACLjB,EAAU,KAAOiB,EAAK,OAEnBnB,EAAEmB,EAAK,KAAMjB,EAAW,GAAIiB,EAAK,WAAa,CAAE,CAAC,CAC3D,CACD,MAAML,EAAQJ,EAASS,EAAK,KAAMA,EAAK,KAAK,EAC5C,OAAAL,EAAM,QAAUK,EAAK,OACrBL,EAAM,WAAaK,EAAK,UACxBL,EAAM,MAAQK,EAAK,KACnBL,EAAM,OAASK,EAAK,MACbL,CACX,EAwBMS,GAAqB,CAACC,EAAWC,IAE/BD,GAAa,MAAQ,CAAC/B,EAAc+B,CAAS,EACzCC,EAAW,EAGJD,IAAc,QAAU,GAAQA,IAAc,IAAM,CAAC,CAACA,EAE7DC,EAAW,EAEJ,WAAWD,CAAS,EAE3BC,EAAW,EAGJ,OAAOD,CAAS,EAGpBA,EAIJA,EAuBLE,GAAY,CAACC,EAAKC,EAAMC,IAAS,CACnC,MAAMC,EAAKC,EAAI,GAAGH,EAAMC,CAAI,EAC5B,OAAAF,EAAI,cAAcG,CAAE,EACbA,CACX,EACME,EAAkC,IAAI,QACtCC,GAAgB,CAACtD,EAASuD,EAASC,IAAY,CACjD,IAAIC,EAAQC,EAAO,IAAI1D,CAAO,EAC1B2D,IAAoCH,GACpCC,EAASA,GAAS,IAAI,cAClB,OAAOA,GAAU,SACjBA,EAAQF,EAGRE,EAAM,YAAYF,CAAO,GAI7BE,EAAQF,EAEZG,EAAO,IAAI1D,EAASyD,CAAK,CAC7B,EACMG,GAAW,CAACC,EAAoBC,EAASC,IAAS,CACpD,IAAI7C,EACJ,MAAMlB,EAAUgE,EAAWF,CAAO,EAC5BL,EAAQC,EAAO,IAAI1D,CAAO,EAIhC,GADA6D,EAAqBA,EAAmB,WAAa,GAAsCA,EAAqB5C,EAC5GwC,EACA,GAAI,OAAOA,GAAU,SAAU,CAC3BI,EAAqBA,EAAmB,MAAQA,EAChD,IAAII,EAAgBZ,EAAkB,IAAIQ,CAAkB,EACxDK,EAIJ,GAHKD,GACDZ,EAAkB,IAAIQ,EAAqBI,EAAgB,IAAI,GAAK,EAEpE,CAACA,EAAc,IAAIjE,CAAO,EAAG,CAC7B,CACIkE,EAAWjD,EAAI,cAAc,OAAO,EACpCiD,EAAS,UAAYT,EAErB,MAAMU,GAASjD,EAAKkC,EAAI,WAAa,MAAQlC,IAAO,OAASA,EAAKF,EAAyBC,CAAG,EAC1FkD,GAAS,MACTD,EAAS,aAAa,QAASC,CAAK,EAExCN,EAAmB,aAAaK,EAAUL,EAAmB,cAAc,MAAM,CAAC,CACrF,CACGI,GACAA,EAAc,IAAIjE,CAAO,CAEhC,CACJ,MACS6D,EAAmB,mBAAmB,SAASJ,CAAK,IAC1DI,EAAmB,mBAAqB,CAAC,GAAGA,EAAmB,mBAAoBJ,CAAK,GAGhG,OAAOzD,CACX,EACMoE,GAAgBC,GAAY,CAC9B,MAAMP,EAAUO,EAAQ,UAClBrB,EAAMqB,EAAQ,cACdC,EAAQR,EAAQ,QAChBS,EAAkBnE,EAAW,eAAgB0D,EAAQ,SAAS,EAC9D9D,EAAU4D,GAASZ,EAAI,WAAaA,EAAI,WAAaA,EAAI,cAAec,CAAO,EACjFQ,EAAQ,KAQRtB,EAAI,MAAM,EAAIhD,EACdgD,EAAI,UAAU,IAAIhD,EAAU,IAAI,GAEpCuE,GACJ,EACMP,EAAa,CAACQ,EAAKT,IAAS,MAASS,EAAI,UAwBzCC,EAAc,CAACzB,EAAK0B,EAAYC,EAAUC,EAAUC,EAAOP,IAAU,CACvE,GAAIK,IAAaC,EAAU,CACvB,IAAIE,EAASC,EAAkB/B,EAAK0B,CAAU,EAC1CM,EAAKN,EAAW,cACpB,GAAIA,IAAe,QAAS,CACxB,MAAMO,EAAYjC,EAAI,UAChBkC,EAAaC,EAAeR,CAAQ,EACpCS,EAAaD,EAAeP,CAAQ,EAC1CK,EAAU,OAAO,GAAGC,EAAW,OAAQG,GAAMA,GAAK,CAACD,EAAW,SAASC,CAAC,CAAC,CAAC,EAC1EJ,EAAU,IAAI,GAAGG,EAAW,OAAQC,GAAMA,GAAK,CAACH,EAAW,SAASG,CAAC,CAAC,CAAC,CAC1E,SACQX,IAAe,QAAS,CAGzB,UAAWY,KAAQX,GACX,CAACC,GAAYA,EAASU,CAAI,GAAK,QAC3BA,EAAK,SAAS,GAAG,EACjBtC,EAAI,MAAM,eAAesC,CAAI,EAG7BtC,EAAI,MAAMsC,CAAI,EAAI,IAKlC,UAAWA,KAAQV,GACX,CAACD,GAAYC,EAASU,CAAI,IAAMX,EAASW,CAAI,KACzCA,EAAK,SAAS,GAAG,EACjBtC,EAAI,MAAM,YAAYsC,EAAMV,EAASU,CAAI,CAAC,EAG1CtC,EAAI,MAAMsC,CAAI,EAAIV,EAASU,CAAI,EAI9C,SACQZ,IAAe,MAEhBE,GACAA,EAAS5B,CAAG,UAGV,CAAC8B,GACPJ,EAAW,CAAC,IAAM,KAClBA,EAAW,CAAC,IAAM,IAKdA,EAAW,CAAC,IAAM,IAQlBA,EAAaA,EAAW,MAAM,CAAC,EAE1BK,EAAkBQ,EAAKP,CAAE,EAK9BN,EAAaM,EAAG,MAAM,CAAC,EAQvBN,EAAaM,EAAG,CAAC,EAAIN,EAAW,MAAM,CAAC,EAEvCC,GACAvB,EAAI,IAAIJ,EAAK0B,EAAYC,EAAU,EAAK,EAExCC,GACAxB,EAAI,IAAIJ,EAAK0B,EAAYE,EAAU,EAAK,MAG3C,CAED,MAAMY,EAAY1E,EAAc8D,CAAQ,EACxC,IAAKE,GAAWU,GAAaZ,IAAa,OAAU,CAACC,EACjD,GAAI,CACA,GAAK7B,EAAI,QAAQ,SAAS,GAAG,EAWzBA,EAAI0B,CAAU,EAAIE,MAXU,CAC5B,MAAMa,EAAIb,GAAmB,GAEzBF,IAAe,OACfI,EAAS,IAEJH,GAAY,MAAQ3B,EAAI0B,CAAU,GAAKe,KAC5CzC,EAAI0B,CAAU,EAAIe,EAEzB,CAIJ,MACS,CAAG,CAEbb,GAAY,MAAQA,IAAa,IAC7BA,IAAa,IAAS5B,EAAI,aAAa0B,CAAU,IAAM,KAEnD1B,EAAI,gBAAgB0B,CAAU,GAIhC,CAACI,GAAUR,EAAQ,GAA8BO,IAAU,CAACW,IAClEZ,EAAWA,IAAa,GAAO,GAAKA,EAEhC5B,EAAI,aAAa0B,EAAYE,CAAQ,EAGhD,CACJ,CACL,EACMc,GAAsB,KACtBP,EAAkBQ,GAAYA,EAAaA,EAAM,MAAMD,EAAmB,EAApC,CAAE,EACxCE,EAAgB,CAACC,EAAUC,EAAU5F,EAAWwE,IAAe,CAIjE,MAAM1B,EAAM8C,EAAS,MAAM,WAAa,IAAuCA,EAAS,MAAM,KACxFA,EAAS,MAAM,KACfA,EAAS,MACTC,EAAiBF,GAAYA,EAAS,SAAYlF,EAClDqF,EAAgBF,EAAS,SAAWnF,EAGtC,IAAK+D,KAAcqB,EACTrB,KAAcsB,GAChBvB,EAAYzB,EAAK0B,EAAYqB,EAAcrB,CAAU,EAAG,OAAWxE,EAAW4F,EAAS,OAAO,EAK1G,IAAKpB,KAAcsB,EACfvB,EAAYzB,EAAK0B,EAAYqB,EAAcrB,CAAU,EAAGsB,EAActB,CAAU,EAAGxE,EAAW4F,EAAS,OAAO,CAEtH,EAWMG,EAAY,CAACC,EAAgBC,EAAgBC,EAAYC,IAAc,CAEzE,MAAMtE,EAAWoE,EAAe,WAAWC,CAAU,EACrD,IAAItE,EAAI,EACJkB,EACAsD,EACJ,GAAIvE,EAAS,SAAW,KAEpBiB,EAAMjB,EAAS,MAAQd,EAAI,eAAec,EAAS,MAAM,UAIzDiB,EAAMjB,EAAS,MAASd,EAAI,cAAcc,EAAS,KAAK,EAGpD6D,EAAc,KAAM7D,EAAU7B,CAAS,EAEvCU,GAAMZ,CAAO,GAAKgD,EAAI,MAAM,IAAMhD,GAGlCgD,EAAI,UAAU,IAAKA,EAAI,MAAM,EAAIhD,GAEjC+B,EAAS,WACT,IAAKD,EAAI,EAAGA,EAAIC,EAAS,WAAW,OAAQ,EAAED,EAE1CwE,EAAYL,EAAUC,EAAgBnE,EAAUD,CAAC,EAE7CwE,GAEAtD,EAAI,YAAYsD,CAAS,EAKzC,OAAOtD,CACX,EAgBMuD,EAAY,CAACF,EAAWG,EAAQC,EAAaC,EAAQC,EAAUC,IAAW,CAC5E,IAAIC,EAAgBR,EAChBC,EAIJ,IAHIO,EAAa,YAAcA,EAAa,UAAY5G,IACpD4G,EAAeA,EAAa,YAEzBF,GAAYC,EAAQ,EAAED,EACrBD,EAAOC,CAAQ,IACfL,EAAYL,EAAU,KAAMQ,EAAaE,CAAQ,EAC7CL,IACAI,EAAOC,CAAQ,EAAE,MAAQL,EACzBO,EAAa,aAAaP,EAAWE,CAAM,GAI3D,EAYMM,GAAe,CAACJ,EAAQC,EAAUC,IAAW,CAC/C,QAASG,EAAQJ,EAAUI,GAASH,EAAQ,EAAEG,EAAO,CACjD,MAAM5E,EAAQuE,EAAOK,CAAK,EAC1B,GAAI5E,EAAO,CACP,MAAMa,EAAMb,EAAM,MAClB6E,GAAiB7E,CAAK,EAClBa,GAEAA,EAAI,OAAM,CAEjB,CACJ,CACL,EAqEMiE,GAAiB,CAACZ,EAAWa,EAAOnF,EAAUoF,IAAU,CAC1D,IAAIC,EAAc,EACdC,EAAc,EACdC,EAAYJ,EAAM,OAAS,EAC3BK,EAAgBL,EAAM,CAAC,EACvBM,EAAcN,EAAMI,CAAS,EAC7BG,EAAYN,EAAM,OAAS,EAC3BO,EAAgBP,EAAM,CAAC,EACvBQ,EAAcR,EAAMM,CAAS,EAC7BjF,EACJ,KAAO4E,GAAeE,GAAaD,GAAeI,GAC1CF,GAAiB,KAEjBA,EAAgBL,EAAM,EAAEE,CAAW,EAE9BI,GAAe,KACpBA,EAAcN,EAAM,EAAEI,CAAS,EAE1BI,GAAiB,KACtBA,EAAgBP,EAAM,EAAEE,CAAW,EAE9BM,GAAe,KACpBA,EAAcR,EAAM,EAAEM,CAAS,EAE1BG,EAAYL,EAAeG,CAAa,GAK7CG,EAAMN,EAAeG,CAAa,EAClCH,EAAgBL,EAAM,EAAEE,CAAW,EACnCM,EAAgBP,EAAM,EAAEE,CAAW,GAE9BO,EAAYJ,EAAaG,CAAW,GAIzCE,EAAML,EAAaG,CAAW,EAC9BH,EAAcN,EAAM,EAAEI,CAAS,EAC/BK,EAAcR,EAAM,EAAEM,CAAS,GAE1BG,EAAYL,EAAeI,CAAW,GAC3CE,EAAMN,EAAeI,CAAW,EAkBhCtB,EAAU,aAAakB,EAAc,MAAOC,EAAY,MAAM,WAAW,EACzED,EAAgBL,EAAM,EAAEE,CAAW,EACnCO,EAAcR,EAAM,EAAEM,CAAS,GAE1BG,EAAYJ,EAAaE,CAAa,GAC3CG,EAAML,EAAaE,CAAa,EAMhCrB,EAAU,aAAamB,EAAY,MAAOD,EAAc,KAAK,EAC7DC,EAAcN,EAAM,EAAEI,CAAS,EAC/BI,EAAgBP,EAAM,EAAEE,CAAW,IAQ/B7E,EAAOyD,EAAUiB,GAASA,EAAMG,CAAW,EAAGtF,EAAUsF,CAAW,EACnEK,EAAgBP,EAAM,EAAEE,CAAW,EAEnC7E,GAGI+E,EAAc,MAAM,WAAW,aAAa/E,EAAM+E,EAAc,KAAK,GAKjFH,EAAcE,EAEdf,EAAUF,EAAWc,EAAMM,EAAY,CAAC,GAAK,KAAO,KAAON,EAAMM,EAAY,CAAC,EAAE,MAAO1F,EAAUoF,EAAOE,EAAaI,CAAS,EAEzHJ,EAAcI,GAInBX,GAAaI,EAAOE,EAAaE,CAAS,CAElD,EAmBMM,EAAc,CAACE,EAAWC,IAGxBD,EAAU,QAAUC,EAAW,MAajCF,EAAQ,CAACG,EAAUjG,IAAa,CAClC,MAAMiB,EAAOjB,EAAS,MAAQiG,EAAS,MACjCC,EAAcD,EAAS,WACvBE,EAAcnG,EAAS,WACvBK,EAAML,EAAS,MACfM,EAAON,EAAS,OAClBM,IAAS,MAEDD,IAAQ,QAMRwD,EAAcoC,EAAUjG,EAAU7B,CAAS,EAG/C+H,IAAgB,MAAQC,IAAgB,KAGxCjB,GAAejE,EAAKiF,EAAalG,EAAUmG,CAAW,EAEjDA,IAAgB,MAEjBF,EAAS,SAAW,OAEpBhF,EAAI,YAAc,IAGtBuD,EAAUvD,EAAK,KAAMjB,EAAUmG,EAAa,EAAGA,EAAY,OAAS,CAAC,GAEhED,IAAgB,MAErBnB,GAAamB,EAAa,EAAGA,EAAY,OAAS,CAAC,GAGlDD,EAAS,SAAW3F,IAGzBW,EAAI,KAAOX,EAEnB,EAQM2E,GAAoBmB,GAAU,CAE5BA,EAAM,SAAWA,EAAM,QAAQ,KAAOA,EAAM,QAAQ,IAAI,IAAI,EAC5DA,EAAM,YAAcA,EAAM,WAAW,IAAInB,EAAgB,CAEjE,EAcMoB,GAAa,CAAC/D,EAASgE,EAAiBC,EAAgB,KAAU,CACpE,MAAMC,EAAUlE,EAAQ,cAClBP,EAAUO,EAAQ,UAClB2D,EAAW3D,EAAQ,SAAWtC,EAAS,KAAM,IAAI,EAMjDyG,EAAYjG,GAAO8F,CAAe,EAAIA,EAAkBhH,EAAE,KAAM,KAAMgH,CAAe,EAY3F,GAXApI,EAAcsI,EAAQ,QAClBzE,EAAQ,mBACR0E,EAAU,QAAUA,EAAU,SAAW,GACzC1E,EAAQ,iBAAiB,IAAI,CAAC,CAAC2E,EAAUC,CAAS,IAAOF,EAAU,QAAQE,CAAS,EAAIH,EAAQE,CAAQ,CAAE,GAQ1GH,GAAiBE,EAAU,QAC3B,UAAWhI,KAAO,OAAO,KAAKgI,EAAU,OAAO,EASvCD,EAAQ,aAAa/H,CAAG,GAAK,CAAC,CAAC,MAAO,MAAO,QAAS,OAAO,EAAE,SAASA,CAAG,IAC3EgI,EAAU,QAAQhI,CAAG,EAAI+H,EAAQ/H,CAAG,GAIhDgI,EAAU,MAAQ,KAClBA,EAAU,SAAW,EACrBnE,EAAQ,QAAUmE,EAClBA,EAAU,MAAQR,EAAS,MAASO,EAAQ,YAAcA,EAEtDvI,EAAUuI,EAAQ,MAAM,EAG5BV,EAAMG,EAAUQ,CAAS,CAC7B,EACMG,GAAmB,CAACtE,EAASuE,IAAsB,CACjDA,GAAqB,CAACvE,EAAQ,mBAAqBuE,EAAkB,KAAK,GAC1EA,EAAkB,KAAK,EAAE,KAAK,IAAI,QAASC,GAAOxE,EAAQ,kBAAoBwE,CAAE,CAAC,CAEzF,EACMC,EAAiB,CAACzE,EAASiE,IAAkB,CAI/C,GAFIjE,EAAQ,SAAW,GAEnBA,EAAQ,QAAU,EAAyC,CAC3DA,EAAQ,SAAW,IACnB,MACH,CACD,OAAAsE,GAAiBtE,EAASA,EAAQ,mBAAmB,EAK9C0E,GADU,IAAMC,GAAc3E,EAASiE,CAAa,CAClC,CAC7B,EAWMU,GAAgB,CAAC3E,EAASiE,IAAkB,CAC9C,MAAMW,EAAc7I,EAAW,iBAAkBiE,EAAQ,UAAU,SAAS,EACtE6E,EAAW7E,EAAQ,eAazB,IAAI8E,EACJ,OAAIb,IAOIa,EAAeC,EAASF,EAAU,mBAAmB,GAIzDC,EAAeE,EAAQF,EAAc,IAAMC,EAASF,EAAU,qBAAqB,CAAC,EAExFD,IACOI,EAAQF,EAAc,IAAMG,GAAgBjF,EAAS6E,EAAUZ,CAAa,CAAC,CACxF,EAiBMe,EAAU,CAACF,EAAcI,IAAOC,GAAWL,CAAY,EAAIA,EAAa,KAAKI,CAAE,EAAIA,EAAE,EAWrFC,GAAcL,GAAiBA,aAAwB,SACxDA,GAAgBA,EAAa,MAAQ,OAAOA,EAAa,MAAS,WAWjEG,GAAkB,MAAOjF,EAAS6E,EAAUZ,IAAkB,CAChE,IAAIpH,EACJ,MAAM8B,EAAMqB,EAAQ,cACdoF,EAAYrJ,EAAW,SAAUiE,EAAQ,UAAU,SAAS,EAC5DqF,EAAK1G,EAAI,MAAM,EACjBsF,GAEAlE,GAAaC,CAAO,EAExB,MAAMsF,EAAYvJ,EAAW,SAAUiE,EAAQ,UAAU,SAAS,EAE9DuF,GAAWvF,EAAS6E,EAAUlG,EAAKsF,CAAa,EAEhDoB,IAIAA,EAAG,IAAKjH,GAAOA,EAAI,GACnBO,EAAI,MAAM,EAAI,QAElB2G,IACAF,IACA,CACI,MAAMI,GAAoB3I,EAAK8B,EAAI,KAAK,KAAO,MAAQ9B,IAAO,OAASA,EAAK,GACtE4I,EAAa,IAAMC,GAAoB1F,CAAO,EAChDwF,EAAiB,SAAW,EAC5BC,KAGA,QAAQ,IAAID,CAAgB,EAAE,KAAKC,CAAU,EAC7CzF,EAAQ,SAAW,EACnBwF,EAAiB,OAAS,EAEjC,CACL,EAaMD,GAAa,CAACvF,EAAS6E,EAAUlG,EAAKsF,IAAkB,CAC1D,GAAI,CAKAY,EAAWA,EAAS,SAEhB7E,EAAQ,SAAW,IAGnBA,EAAQ,SAAW,EAQX+D,GAAW/D,EAAS6E,EAAUZ,CAAa,CAI1D,OACM0B,EAAG,CACNC,EAAaD,EAAG3F,EAAQ,aAAa,CACxC,CACD,OAAO,IACX,EACM0F,GAAuB1F,GAAY,CACrC,MAAM/D,EAAU+D,EAAQ,UAAU,UAC5BrB,EAAMqB,EAAQ,cACd6F,EAAgB9J,EAAW,aAAcE,CAAO,EAChD4I,EAAW7E,EAAQ,eACnBuE,EAAoBvE,EAAQ,oBAE9B+E,EAASF,EAAU,oBAAoB,EAErC7E,EAAQ,QAAU,GAkBpB6F,KAjBA7F,EAAQ,SAAW,GAGf8F,GAAgBnH,CAAG,EAGnBoG,EAASF,EAAU,kBAAkB,EAEzCgB,IAEI7F,EAAQ,iBAAiBrB,CAAG,EACvB4F,GACDwB,MAUJ/F,EAAQ,oBACRA,EAAQ,kBAAiB,EACzBA,EAAQ,kBAAoB,QAE5BA,EAAQ,QAAU,KAClBgG,EAAS,IAAMvB,EAAezE,EAAS,EAAK,CAAC,EAEjDA,EAAQ,SAAW,IAK3B,EACM+F,GAAcE,GAAQ,CAIpBH,GAAgBlJ,EAAI,eAAe,EAEvCoJ,EAAS,IAAMtH,GAAUwC,EAAK,UAAW,CAAE,OAAQ,CAAE,UAAWxF,GAAa,EAAC,CAClF,EAWMqJ,EAAW,CAACF,EAAUqB,EAAQC,IAAQ,CACxC,GAAItB,GAAYA,EAASqB,CAAM,EAC3B,GAAI,CACA,OAAOrB,EAASqB,CAAM,EAAEC,CAAG,CAC9B,OACMR,EAAG,CACNC,EAAaD,CAAC,CACjB,CAGT,EACMG,GAAmBnH,GAAQA,EAAI,UAAU,IAAI,UAAU,EAEvDyH,GAAW,CAACC,EAAKjC,IAAakC,EAAWD,CAAG,EAAE,iBAAiB,IAAIjC,CAAQ,EAC3EmC,GAAW,CAACF,EAAKjC,EAAUoC,EAAQ/G,IAAY,CAEjD,MAAMO,EAAUsG,EAAWD,CAAG,EACxB1H,EAAMqB,EAAQ,cACdyG,EAASzG,EAAQ,iBAAiB,IAAIoE,CAAQ,EAC9CnE,EAAQD,EAAQ,QAChB6E,EAAW7E,EAAQ,eACzBwG,EAASjI,GAAmBiI,EAAQ/G,EAAQ,UAAU2E,CAAQ,EAAE,CAAC,CAAC,EAElE,MAAMsC,EAAa,OAAO,MAAMD,CAAM,GAAK,OAAO,MAAMD,CAAM,EACxDG,EAAiBH,IAAWC,GAAU,CAACC,EAC7C,IAAK,EAAEzG,EAAQ,IAA8CwG,IAAW,SAAcE,IAGlF3G,EAAQ,iBAAiB,IAAIoE,EAAUoC,CAAM,EACzC3B,GAAU,CAEV,GAAIpF,EAAQ,YAAcQ,EAAQ,IAAmC,CACjE,MAAM2G,EAAenH,EAAQ,WAAW2E,CAAQ,EAC5CwC,GAEAA,EAAa,IAAKC,GAAoB,CAClC,GAAI,CAEAhC,EAASgC,CAAe,EAAEL,EAAQC,EAAQrC,CAAQ,CACrD,OACMuB,EAAG,CACNC,EAAaD,EAAGhH,CAAG,CACtB,CACzB,CAAqB,CAER,EACIsB,EAAS,MAA6E,GAKvFwE,EAAezE,EAAS,EAAK,CAEpC,CAET,EAWM8G,GAAiB,CAACC,EAAMtH,EAASQ,IAAU,CAC7C,IAAIpD,EACJ,GAAI4C,EAAQ,UAAW,CACfsH,EAAK,WACLtH,EAAQ,WAAasH,EAAK,UAG9B,MAAMC,EAAU,OAAO,QAAQvH,EAAQ,SAAS,EAC1CwH,EAAYF,EAAK,UAmBvB,GAlBAC,EAAQ,IAAI,CAAC,CAAC3G,EAAY,CAAC6G,CAAW,CAAC,IAAM,EACpCA,EAAc,IACTjH,EAAQ,GAAmCiH,EAAc,KAE/D,OAAO,eAAeD,EAAW5G,EAAY,CACzC,KAAM,CAEF,OAAO+F,GAAS,KAAM/F,CAAU,CACnC,EACD,IAAIE,EAAU,CAEVgG,GAAS,KAAMlG,EAAYE,EAAUd,CAAO,CAC/C,EACD,aAAc,GACd,WAAY,EAChC,CAAiB,CAEjB,CAAS,EACIQ,EAAQ,EAA2C,CACpD,MAAMkH,EAAqB,IAAI,IAC/BF,EAAU,yBAA2B,SAAUG,EAAU9G,EAAUC,EAAU,CACzExB,EAAI,IAAI,IAAM,CACV,MAAMqF,EAAW+C,EAAmB,IAAIC,CAAQ,EAkChD,GAAI,KAAK,eAAehD,CAAQ,EAC5B7D,EAAW,KAAK6D,CAAQ,EACxB,OAAO,KAAKA,CAAQ,MAEnB,IAAI6C,EAAU,eAAe7C,CAAQ,GACtC,OAAO,KAAKA,CAAQ,GAAM,UAC1B,KAAKA,CAAQ,GAAK7D,EAIlB,OAEC,GAAI6D,GAAY,KAAM,CAGvB,MAAMpE,EAAUsG,EAAW,IAAI,EACzBrG,EAAQD,GAAY,KAA6B,OAASA,EAAQ,QAKxE,GAAI,EAAEC,EAAQ,IACVA,EAAQ,KACRM,IAAaD,EAAU,CACvB,MAAMuE,EAAW7E,EAAQ,eACnBqH,EAAQ5H,EAAQ,WAAW2H,CAAQ,EACzCC,GAAU,MAAoCA,EAAM,QAASC,GAAiB,CACtEzC,EAASyC,CAAY,GAAK,MAC1BzC,EAASyC,CAAY,EAAE,KAAKzC,EAAUtE,EAAUD,EAAU8G,CAAQ,CAEtG,CAA6B,CACJ,CACD,MACH,EACD,KAAKhD,CAAQ,EAAI7D,IAAa,MAAQ,OAAO,KAAK6D,CAAQ,GAAM,UAAY,GAAQ7D,CACxG,CAAiB,CACjB,EAMYwG,EAAK,mBAAqB,MAAM,KAAK,IAAI,IAAI,CACzC,GAAG,OAAO,MAAMlK,EAAK4C,EAAQ,cAAgB,MAAQ5C,IAAO,OAASA,EAAK,EAAE,EAC5E,GAAGmK,EACE,OAAO,CAAC,CAACO,EAAGC,CAAC,IAAMA,EAAE,CAAC,EAAI,EAAmC,EAC7D,IAAI,CAAC,CAACpD,EAAUoD,CAAC,IAAM,CACxB,MAAMJ,EAAWI,EAAE,CAAC,GAAKpD,EACzB,OAAA+C,EAAmB,IAAIC,EAAUhD,CAAQ,EACrCoD,EAAE,CAAC,EAAI,KACP/H,EAAQ,iBAAiB,KAAK,CAAC2E,EAAUgD,CAAQ,CAAC,EAE/CA,CAC3B,CAAiB,CACJ,EAAC,CACL,CACJ,CACD,OAAOL,CACX,EACMU,GAAsB,MAAO9I,EAAKqB,EAASP,EAASiI,EAAcX,IAAS,CAE7E,GAAK,EAAA/G,EAAQ,QAAU,IAAoD,CAEvEA,EAAQ,SAAW,GACnB,CAKI,GADA+G,EAAOY,GAAWlI,CAAO,EACrBsH,EAAK,KAAM,CAEX,MAAMa,EAAU1L,KAChB6K,EAAO,MAAMA,EACba,GACH,CACIb,EAAK,YAKFtH,EAAQ,WAAasH,EAAK,SAE9BD,GAAeC,EAAMtH,EAAS,GAC9BsH,EAAK,UAAY,IAErB,MAAMc,EAAiB9L,EAAW,iBAAkB0D,EAAQ,SAAS,EAKjEO,EAAQ,SAAW,EAMvB,GAAI,CACA,IAAI+G,EAAK/G,CAAO,CACnB,OACM2F,EAAG,CACNC,EAAaD,CAAC,CACjB,CAEG3F,EAAQ,SAAW,GAGnBA,EAAQ,SAAW,IAEvB6H,GACH,CACD,GAAId,EAAK,MAAO,CAEZ,IAAI3H,EAAQ2H,EAAK,MACjB,MAAMpL,EAAUgE,EAAWF,CAAO,EAClC,GAAI,CAACJ,EAAO,IAAI1D,CAAO,EAAG,CACtB,MAAMmM,EAAoB/L,EAAW,iBAAkB0D,EAAQ,SAAS,EACxER,GAActD,EAASyD,EAAO,CAAC,EAAEK,EAAQ,QAAU,EAAyC,EAC5FqI,GACH,CACJ,CACJ,CAED,MAAMvD,EAAoBvE,EAAQ,oBAC5B+H,EAAW,IAAMtD,EAAezE,EAAS,EAAI,EAC/CuE,GAAqBA,EAAkB,MAAM,EAO7CA,EAAkB,MAAM,EAAE,KAAKwD,CAAQ,EAGvCA,GAER,EACMC,GAAyBnD,GAAa,CAC5C,EACMoD,GAAqBtJ,GAAQ,CAC/B,GAAK,EAAAI,EAAI,QAAU,GAAiD,CAChE,MAAMiB,EAAUsG,EAAW3H,CAAG,EACxBc,EAAUO,EAAQ,UAClBkI,EAAenM,EAAW,oBAAqB0D,EAAQ,SAAS,EACtE,GAAMO,EAAQ,QAAU,EAmChBA,GAAY,MAAsCA,EAAQ,gBACrDA,GAAY,MAAsCA,EAAQ,kBAC/DA,EAAQ,iBAAiB,KAAK,IAAMgI,GAAuB,OArCT,CAEtDhI,EAAQ,SAAW,EACnB,CAGI,IAAIuE,EAAoB5F,EACxB,KAAQ4F,EAAoBA,EAAkB,YAAcA,EAAkB,MAG1E,GAAIA,EAAkB,KAAK,EAAG,CAG1BD,GAAiBtE,EAAUA,EAAQ,oBAAsBuE,CAAiB,EAC1E,KACH,CAER,CAGG9E,EAAQ,WACR,OAAO,QAAQA,EAAQ,SAAS,EAAE,IAAI,CAAC,CAACY,EAAY,CAAC6G,CAAW,CAAC,IAAM,CACnE,GAAIA,EAAc,IAA8BvI,EAAI,eAAe0B,CAAU,EAAG,CAC5E,MAAMiB,EAAQ3C,EAAI0B,CAAU,EAC5B,OAAO1B,EAAI0B,CAAU,EACrB1B,EAAI0B,CAAU,EAAIiB,CACrB,CACrB,CAAiB,EAGDmG,GAAoB9I,EAAKqB,EAASP,CAAO,CAEhD,CAQDyI,GACH,CACL,EACMC,GAAsBtD,GAAa,CACzC,EACMuD,GAAuB,MAAOzJ,GAAQ,CACxC,GAAK,EAAAI,EAAI,QAAU,GAAiD,CAChE,MAAMiB,EAAUsG,EAAW3H,CAAG,EAC1BqB,GAAY,MAAsCA,EAAQ,gBACrDA,GAAY,MAAsCA,EAAQ,kBAC/DA,EAAQ,iBAAiB,KAAK,IAAMmI,GAAoB,EAE/D,CACL,EACME,GAAgB,CAACC,EAAaC,EAAU,KAAO,CACjD,IAAI1L,EACJ,MAAM2L,EAAezM,IACf0M,EAAU,GACVC,EAAUH,EAAQ,SAAW,GAC7BI,EAAiBzH,EAAI,eACrB0H,EAAOhM,EAAI,KACXiM,EAA4BD,EAAK,cAAc,eAAe,EAC9DE,EAAgClM,EAAI,cAAc,OAAO,EACzDmM,EAA6B,GACnC,IAAIC,EACAC,EAAkB,GACtB,OAAO,OAAOlK,EAAKwJ,CAAO,EAC1BxJ,EAAI,eAAiB,IAAI,IAAIwJ,EAAQ,cAAgB,KAAM3L,EAAI,OAAO,EAAE,KACxE0L,EAAY,IAAKY,GAAe,CAC5BA,EAAW,CAAC,EAAE,IAAKC,GAAgB,CAC/B,IAAItM,EACJ,MAAM4C,EAAU,CACZ,QAAS0J,EAAY,CAAC,EACtB,UAAWA,EAAY,CAAC,EACxB,UAAWA,EAAY,CAAC,EACxB,YAAaA,EAAY,CAAC,CAC1C,EAEgB1J,EAAQ,UAAY0J,EAAY,CAAC,EAGjC1J,EAAQ,iBAAmB,GAG3BA,EAAQ,YAAc5C,EAAKsM,EAAY,CAAC,KAAO,MAAQtM,IAAO,OAASA,EAAK,GAEhF,MAAMZ,EAAUwD,EAAQ,UAClB2J,GAAc,cAAc,WAAY,CAE1C,YAAYC,EAAM,CAEd,MAAMA,CAAI,EACVA,EAAO,KACPC,GAAaD,EAAM5J,CAAO,EACtBA,EAAQ,QAAU,GAOV4J,EAAK,aAAa,CAAE,KAAM,MAAQ,EAIjD,CACD,mBAAoB,CACZL,IACA,aAAaA,CAAe,EAC5BA,EAAkB,MAElBC,EAEAF,EAA2B,KAAK,IAAI,EAGpChK,EAAI,IAAI,IAAMkJ,GAAkB,IAAI,CAAC,CAE5C,CACD,sBAAuB,CACnBlJ,EAAI,IAAI,IAAMqJ,GAAqB,IAAI,CAAC,CAC3C,CACD,kBAAmB,CACf,OAAO9B,EAAW,IAAI,EAAE,gBAC3B,CACjB,EACY7G,EAAQ,eAAiByJ,EAAW,CAAC,EACjC,CAACR,EAAQ,SAASzM,CAAO,GAAK,CAAC0M,EAAe,IAAI1M,CAAO,IACzDwM,EAAQ,KAAKxM,CAAO,EACpB0M,EAAe,OAAO1M,EAAS6K,GAAesC,GAAa3J,EAAS,CAAC,CAAwC,EAE7H,CAAS,CACT,CAAK,EACD,CACIqJ,EAAgB,UAAYL,EAAUpM,GACtCyM,EAAgB,aAAa,cAAe,EAAE,EAE9C,MAAMhJ,GAASjD,EAAKkC,EAAI,WAAa,MAAQlC,IAAO,OAASA,EAAKF,EAAyBC,CAAG,EAC1FkD,GAAS,MACTgJ,EAAgB,aAAa,QAAShJ,CAAK,EAE/C8I,EAAK,aAAaE,EAAiBD,EAAcA,EAAY,YAAcD,EAAK,UAAU,CAC7F,CAEDK,EAAkB,GACdF,EAA2B,OAC3BA,EAA2B,IAAKQ,GAASA,EAAK,kBAAmB,GAI7DxK,EAAI,IAAI,IAAOiK,EAAkB,WAAWjD,GAAY,EAAE,CAAE,EAIpEyC,GACJ,EAYMgB,GAAyB,IAAI,QAO7BlD,EAAcD,GAAQmD,GAAS,IAAInD,CAAG,EAmBtCiD,GAAe,CAACG,EAAahK,IAAY,CAC3C,MAAMO,EAAU,CACZ,QAAS,EACT,cAAeyJ,EACf,UAAWhK,EACX,iBAAkB,IAAI,GAC9B,EAEQ,OAAAO,EAAQ,iBAAmB,IAAI,QAASwE,GAAOxE,EAAQ,iBAAmBwE,CAAE,EAC5EiF,EAAY,KAAK,EAAI,GACrBA,EAAY,MAAM,EAAI,GAEnBD,GAAS,IAAIC,EAAazJ,CAAO,CAC5C,EACMU,EAAoB,CAAC/B,EAAK0B,IAAeA,KAAc1B,EACvDiH,EAAe,CAACD,EAAG+D,OAAW,QAAQ,OAAO/D,EAAG+D,CAAE,EAClDC,EAA2B,IAAI,IAC/BhC,GAAa,CAAClI,EAASO,EAAS0H,IAAiB,CAEnD,MAAMkC,EAAanK,EAAQ,UAAU,QAAQ,KAAM,GAAG,EAChDoK,EAAWpK,EAAQ,eACnBqK,EAASH,EAAW,IAAIE,CAAQ,EACtC,GAAIC,EACA,OAAOA,EAAOF,CAAU,EAEhC,qCACI,OAAMG,GAAA,IAAC,OAKP,KAAKF,CAAQ,aAAgB,oBAAE,KAAMG,IAE7BL,EAAW,IAAIE,EAAUG,CAAc,EAEpCA,EAAeJ,CAAU,GACjChE,CAAY,CACnB,EACMvG,EAAuB,IAAI,IAC3B6B,EAAM,OAAO,OAAW,IAAc,OAAS,GAC/CtE,EAAMsE,EAAI,UAAY,CAAE,KAAM,CAAE,GAChCnC,EAAM,CACR,QAAS,EACT,eAAgB,GAChB,IAAM/B,GAAMA,EAAG,EACf,IAAMA,GAAM,sBAAsBA,CAAC,EACnC,IAAK,CAAC0M,EAAIO,EAAWC,EAAUrL,IAAS6K,EAAG,iBAAiBO,EAAWC,EAAUrL,CAAI,EACrF,IAAK,CAAC6K,EAAIO,EAAWC,EAAUrL,IAAS6K,EAAG,oBAAoBO,EAAWC,EAAUrL,CAAI,EACxF,GAAI,CAACoL,EAAWpL,IAAS,IAAI,YAAYoL,EAAWpL,CAAI,CAC5D,EACMsL,GAAkB3N,GAAM,QAAQ,QAAQA,CAAC,EACzC8C,IAAkD,IAAM,CACtD,GAAI,CACA,WAAI,cACG,OAAO,IAAI,gBAAgB,aAAgB,UACrD,MACS,CAAG,CACb,MAAO,EACf,GAAQ,EAEF8K,EAAgB,GAChBC,GAAiB,GACjBC,GAAY,CAACC,EAAOC,IAAWpM,GAAO,CACxCmM,EAAM,KAAKnM,CAAE,EACRtC,IACDA,EAAe,GACX0O,GAASzL,EAAI,QAAU,EACvBiH,EAASyE,CAAK,EAGd1L,EAAI,IAAI0L,CAAK,EAGzB,EACMC,EAAWH,GAAU,CACvB,QAAS9M,EAAI,EAAGA,EAAI8M,EAAM,OAAQ9M,IAC9B,GAAI,CACA8M,EAAM9M,CAAC,EAAE,YAAY,IAAK,EAC7B,OACMkI,EAAG,CACNC,EAAaD,CAAC,CACjB,CAEL4E,EAAM,OAAS,CACnB,EACME,EAAQ,IAAM,CAIhBC,EAAQN,CAAa,EAGjBM,EAAQL,EAAc,GACjBvO,EAAesO,EAAc,OAAS,IAGvCrL,EAAI,IAAI0L,CAAK,CAGzB,EACMzE,EAA0B5H,GAAO+L,GAAgB,EAAC,KAAK/L,CAAE,EACzDsG,GAA0B4F,GAAUD,GAAgB,EAAI,ECjtDxDM,GAAuB,CAACzJ,EAAKqH,IAAY,CAC7C,GAAI,SAAO,OAAW,KACtB,OAAOF,GAAc,CAAC,CAAC,YAAY,CAAC,CAAC,EAAE,YAAY,CAAC,SAAW,CAAC,EAAE,WAAW,EAAE,QAAU,CAAC,EAAE,UAAU,EAAE,iBAAmB,CAAC,EAAE,mBAAmB,EAAE,MAAQ,CAAC,CAAC,EAAE,UAAY,CAAC,EAAE,YAAY,EAAE,YAAc,CAAC,EAAE,cAAc,EAAE,OAAS,CAAC,CAAC,EAAE,KAAO,CAAC,CAAC,EAAE,MAAQ,CAAC,CAAC,EAAE,WAAa,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,SAAW,CAAC,kBAAkB,EAAE,iBAAmB,CAAC,6BAA6B,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,EAAE,aAAa,CAAC,KAAO,CAAC,CAAC,EAAE,kBAAoB,CAAC,EAAE,qBAAqB,EAAE,kBAAoB,CAAC,EAAE,qBAAqB,EAAE,kBAAoB,CAAC,EAAE,qBAAqB,EAAE,oBAAsB,CAAC,EAAE,uBAAuB,EAAE,YAAc,CAAC,EAAE,cAAc,EAAE,aAAe,CAAC,EAAE,eAAe,EAAE,SAAW,CAAC,CAAC,EAAE,OAAS,CAAC,EAAE,SAAS,EAAE,mBAAqB,CAAC,IAAI,sBAAsB,EAAE,oBAAsB,CAAC,EAAE,uBAAuB,EAAE,oBAAsB,CAAC,EAAE,uBAAuB,EAAE,oBAAsB,CAAC,EAAE,uBAAuB,EAAE,sBAAwB,CAAC,EAAE,yBAAyB,CAAC,EAAE,KAAK,CAAC,KAAO,CAAC,cAAc,EAAE,kBAAoB,CAAC,2BAA2B,EAAE,kBAAoB,CAAC,2BAA2B,EAAE,kBAAoB,CAAC,2BAA2B,EAAE,oBAAsB,CAAC,6BAA6B,EAAE,YAAc,CAAC,qBAAqB,EAAE,aAAe,CAAC,sBAAsB,EAAE,SAAW,CAAC,kBAAkB,EAAE,oBAAsB,CAAC,6BAA6B,EAAE,oBAAsB,CAAC,6BAA6B,EAAE,oBAAsB,CAAC,6BAA6B,EAAE,sBAAwB,CAAC,+BAA+B,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC,EAAE,oBAAoB,CAAC,aAAe,CAAC,EAAE,eAAe,EAAE,YAAc,CAAC,EAAE,cAAc,EAAE,SAAW,CAAC,EAAE,WAAW,EAAE,SAAW,CAAC,CAAC,EAAE,QAAU,CAAC,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,aAAe,CAAC,sBAAsB,EAAE,YAAc,CAAC,qBAAqB,EAAE,SAAW,CAAC,wBAAwB,EAAE,SAAW,CAAC,uBAAuB,EAAE,QAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,uBAAuB,CAAC,CAAC,EAAE,uBAAuB,CAAC,aAAe,CAAC,EAAE,eAAe,EAAE,SAAW,CAAC,EAAE,WAAW,EAAE,MAAQ,CAAC,CAAC,EAAE,QAAU,CAAC,EAAE,UAAU,EAAE,iBAAmB,CAAC,EAAE,oBAAoB,EAAE,eAAiB,CAAC,EAAE,kBAAkB,EAAE,eAAiB,CAAC,EAAE,kBAAkB,EAAE,YAAc,CAAC,EAAE,eAAe,EAAE,eAAiB,CAAC,EAAE,kBAAkB,EAAE,eAAiB,CAAC,EAAE,kBAAkB,EAAE,YAAc,CAAC,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,mBAAmB,CAAC,CAAC,EAAE,mBAAmB,CAAC,QAAU,CAAC,EAAE,EAAE,QAAU,CAAC,CAAC,EAAE,MAAQ,CAAC,CAAC,EAAE,WAAa,CAAC,EAAE,aAAa,EAAE,QAAU,CAAC,EAAE,UAAU,EAAE,SAAW,CAAC,EAAE,WAAW,EAAE,QAAU,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC,EAAE,oBAAoB,CAAC,QAAU,CAAC,EAAE,UAAU,EAAE,MAAQ,CAAC,CAAC,EAAE,cAAgB,CAAC,EAAE,gBAAgB,EAAE,QAAU,CAAC,CAAC,EAAE,KAAO,CAAC,CAAC,EAAE,SAAW,CAAC,EAAE,WAAW,EAAE,aAAe,CAAC,EAAE,eAAe,EAAE,WAAa,CAAC,EAAE,aAAa,CAAC,EAAE,KAAK,CAAC,QAAU,CAAC,cAAc,EAAE,MAAQ,CAAC,YAAY,EAAE,QAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,EAAE,kBAAkB,CAAC,QAAU,CAAC,IAAI,UAAU,EAAE,UAAY,CAAC,EAAE,YAAY,EAAE,gBAAkB,CAAC,EAAE,kBAAkB,EAAE,UAAY,CAAC,EAAE,YAAY,EAAE,MAAQ,CAAC,GAAG,EAAE,WAAa,CAAC,EAAE,aAAa,EAAE,QAAU,CAAC,EAAE,UAAU,EAAE,WAAa,CAAC,EAAE,aAAa,EAAE,UAAY,CAAC,EAAE,YAAY,EAAE,UAAY,CAAC,EAAE,YAAY,EAAE,QAAU,CAAC,CAAC,EAAE,SAAW,CAAC,EAAE,WAAW,EAAE,UAAY,CAAC,EAAE,YAAY,EAAE,YAAc,CAAC,EAAE,cAAc,EAAE,cAAgB,CAAC,EAAE,gBAAgB,CAAC,EAAE,KAAK,CAAC,QAAU,CAAC,cAAc,EAAE,UAAY,CAAC,gBAAgB,EAAE,UAAY,CAAC,gBAAgB,EAAE,QAAU,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,gBAAgB,CAAC,CAAC,EAAE,gBAAgB,CAAC,YAAc,CAAC,CAAC,EAAE,MAAQ,CAAC,CAAC,EAAE,WAAa,CAAC,EAAE,aAAa,EAAE,WAAa,CAAC,EAAE,aAAa,EAAE,QAAU,CAAC,EAAE,UAAU,EAAE,SAAW,CAAC,EAAE,WAAW,EAAE,UAAY,CAAC,EAAE,YAAY,EAAE,UAAY,CAAC,EAAE,YAAY,EAAE,WAAa,CAAC,EAAE,aAAa,EAAE,MAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,kBAAkB,CAAC,CAAC,EAAE,kBAAkB,CAAC,OAAS,CAAC,EAAE,EAAE,YAAc,CAAC,EAAE,EAAE,IAAM,CAAC,EAAE,EAAE,QAAU,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,EAAE,aAAa,CAAC,IAAM,CAAC,CAAC,EAAE,MAAQ,CAAC,CAAC,EAAE,QAAU,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,MAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,EAAE,cAAc,CAAC,SAAW,CAAC,EAAE,WAAW,EAAE,KAAO,CAAC,EAAE,OAAO,EAAE,WAAa,CAAC,EAAE,aAAa,EAAE,WAAa,CAAC,EAAE,aAAa,EAAE,aAAe,CAAC,EAAE,eAAe,EAAE,UAAY,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,SAAW,CAAC,kBAAkB,EAAE,KAAO,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC,EAAE,eAAe,CAAC,MAAQ,CAAC,CAAC,EAAE,OAAS,CAAC,CAAC,EAAE,KAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,cAAc,CAAC,CAAC,EAAE,cAAc,CAAC,KAAO,CAAC,CAAC,EAAE,KAAO,CAAC,CAAC,EAAE,KAAO,CAAC,CAAC,EAAE,aAAe,CAAC,IAAI,eAAe,EAAE,SAAW,CAAC,EAAE,WAAW,EAAE,UAAY,CAAC,EAAE,YAAY,EAAE,UAAY,CAAC,EAAE,YAAY,EAAE,SAAW,CAAC,EAAE,WAAW,EAAE,WAAa,CAAC,IAAI,aAAa,EAAE,SAAW,CAAC,EAAE,WAAW,EAAE,SAAW,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,KAAO,CAAC,cAAc,EAAE,KAAO,CAAC,cAAc,EAAE,KAAO,CAAC,cAAc,EAAE,aAAe,CAAC,sBAAsB,EAAE,SAAW,CAAC,kBAAkB,EAAE,WAAa,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,EAAGE,CAAO,CAC3qJ,GCLC,UAAU,CAAC,GAAiB,OAAO,OAArB,KAAsC,OAAO,UAAhB,QAAkC,OAAO,iBAAhB,OAA+B,CAAC,IAAIqC,EAAE,YAAY,OAAO,YAAY,UAAU,CAAC,OAAO,QAAQ,UAAUA,EAAE,GAAG,KAAK,WAAW,CAAC,EAAE,YAAY,UAAUA,EAAE,UAAU,YAAY,UAAU,YAAY,YAAY,OAAO,eAAe,YAAYA,CAAC,CAAC,CAAC,GAAI,ECG/TD,KAEY,MAACE,GAAa,CACxB,SAAU,CAAE,sBAAuB,EAAM,CAC3C,EAEMC,GAAU,CACd,WAAY,CACV,QAAS,CAAE,cAAe,YAAc,EACxC,SAAU,CACR,SAAU,CACR,MAAO,uBACP,KAAM,OACP,CACF,EACD,IAAK,CACH,MAAO,CACL,CAAE,MAAO,GAAI,MAAO,UAAY,EAChC,CAAE,MAAO,GAAI,MAAO,SAAW,EAC/B,CAAE,MAAO,GAAI,MAAO,QAAU,EAC9B,CAAE,MAAO,GAAI,MAAO,OAAS,EAC7B,CAAE,MAAO,GAAI,MAAO,SAAW,EAC/B,CAAE,MAAO,GAAI,MAAO,UAAY,EAChC,CAAE,MAAO,GAAI,MAAO,UAAY,EAChC,CAAE,MAAO,GAAI,MAAO,UAAY,EAChC,CAAE,MAAO,IAAK,MAAO,UAAY,CAClC,CACF,CACF,CACH","names":["NAMESPACE","scopeId","hostTagName","isSvgMode","queuePending","createTime","fnName","tagName","uniqueTime","key","measureText","HYDRATED_CSS","EMPTY_OBJ","isDef","v","isComplexType","o","queryNonceMetaTagContent","doc","_a","_b","_c","h","nodeName","vnodeData","children","child","simple","lastSimple","vNodeChildren","walk","i","newVNode","classData","k","vdomFnUtils","vnode","tag","text","Host","isHost","node","cb","convertToPublic","convertToPrivate","parsePropertyValue","propValue","propType","emitEvent","elm","name","opts","ev","plt","rootAppliedStyles","registerStyle","cssText","allowCS","style","styles","supportsConstructableStylesheets","addStyle","styleContainerNode","cmpMeta","mode","getScopeId","appliedStyles","styleElm","nonce","attachStyles","hostRef","flags","endAttachStyles","cmp","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","classList","oldClasses","parseClassList","newClasses","c","prop","win","isComplex","n","parseClassListRegex","value","updateElement","oldVnode","newVnode","oldVnodeAttrs","newVnodeAttrs","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","removeVnodes","index","nullifyVNodeRefs","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","isSameVnode","patch","leftVNode","rightVNode","oldVNode","oldChildren","newChildren","vNode","renderVdom","renderFnResults","isInitialLoad","hostElm","rootVnode","propName","attribute","attachToAncestor","ancestorComponent","r","scheduleUpdate","writeTask","dispatchHooks","endSchedule","instance","maybePromise","safeCall","enqueue","updateComponent","fn","isPromisey","endUpdate","rc","endRender","callRender","childrenPromises","postUpdate","postUpdateComponent","e","consoleError","endPostUpdate","addHydratedFlag","appDidLoad","nextTick","who","method","arg","getValue","ref","getHostRef","setValue","newVal","oldVal","areBothNaN","didValueChange","watchMethods","watchMethodName","proxyComponent","Cstr","members","prototype","memberFlags","attrNameToPropName","attrName","entry","callbackName","_","m","initializeComponent","hmrVersionId","loadModule","endLoad","endNewInstance","endRegisterStyles","schedule","fireConnectedCallback","connectedCallback","endConnected","disconnectInstance","disconnectedCallback","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","head","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","lazyBundle","compactMeta","HostElement","self","registerHost","host","hostRefs","hostElement","el","cmpModules","exportName","bundleId","module","__vitePreload","importedModule","eventName","listener","promiseResolve","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume","defineCustomElements","a","parameters","preview"],"sources":["../../dist/esm/index-6bd070a2.js","../../dist/esm/loader.js","../../loader/index.js","../../.storybook/preview.js"],"sourcesContent":["const NAMESPACE = 'mass';\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet hostTagName;\nlet isSvgMode = false;\nlet queuePending = false;\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\nconst isDef = (v) => v != null;\n/**\n * Check whether a value is a 'complex type', defined here as an object or a\n * function.\n *\n * @param o the value to check\n * @returns whether it's a complex type or not\n */\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Helper method for querying a `meta` tag that contains a nonce value\n * out of a DOM's head.\n *\n * @param doc The DOM containing the `head` to query against\n * @returns The content of the meta tag representing the nonce value, or `undefined` if no tag\n * exists or the tag has no content.\n */\nfunction queryNonceMetaTagContent(doc) {\n    var _a, _b, _c;\n    return (_c = (_b = (_a = doc.head) === null || _a === void 0 ? void 0 : _a.querySelector('meta[name=\"csp-nonce\"]')) === null || _b === void 0 ? void 0 : _b.getAttribute('content')) !== null && _c !== void 0 ? _c : undefined;\n}\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        // normalize class / className attributes\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    if (typeof nodeName === 'function') {\n        // nodeName is a functional component\n        return nodeName(vnodeData === null ? {} : vnodeData, vNodeChildren, vdomFnUtils);\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    return vnode;\n};\n/**\n * A utility function for creating a virtual DOM node from a tag and some\n * possible text content.\n *\n * @param tag the tag for this element\n * @param text possible text content for the node\n * @returns a newly-minted virtual DOM node\n */\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\n/**\n * Check whether a given node is a Host node or not\n *\n * @param node the virtual DOM node to check\n * @returns whether it's a Host node or not\n */\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Implementation of {@link d.FunctionalUtilities} for Stencil's VDom.\n *\n * Note that these functions convert from {@link d.VNode} to\n * {@link d.ChildNode} to give functional component developers a friendly\n * interface.\n */\nconst vdomFnUtils = {\n    forEach: (children, cb) => children.map(convertToPublic).forEach(cb),\n    map: (children, cb) => children.map(convertToPublic).map(cb).map(convertToPrivate),\n};\n/**\n * Convert a {@link d.VNode} to a {@link d.ChildNode} in order to present a\n * friendlier public interface (hence, 'convertToPublic').\n *\n * @param node the virtual DOM node to convert\n * @returns a converted child node\n */\nconst convertToPublic = (node) => ({\n    vattrs: node.$attrs$,\n    vchildren: node.$children$,\n    vkey: node.$key$,\n    vname: node.$name$,\n    vtag: node.$tag$,\n    vtext: node.$text$,\n});\n/**\n * Convert a {@link d.ChildNode} back to an equivalent {@link d.VNode} in\n * order to use the resulting object in the virtual DOM. The initial object was\n * likely created as part of presenting a public API, so converting it back\n * involved making it 'private' again (hence, `convertToPrivate`).\n *\n * @param node the child node to convert\n * @returns a converted virtual DOM node\n */\nconst convertToPrivate = (node) => {\n    if (typeof node.vtag === 'function') {\n        const vnodeData = Object.assign({}, node.vattrs);\n        if (node.vkey) {\n            vnodeData.key = node.vkey;\n        }\n        if (node.vname) {\n            vnodeData.name = node.vname;\n        }\n        return h(node.vtag, vnodeData, ...(node.vchildren || []));\n    }\n    const vnode = newVNode(node.vtag, node.vtext);\n    vnode.$attrs$ = node.vattrs;\n    vnode.$children$ = node.vchildren;\n    vnode.$key$ = node.vkey;\n    vnode.$name$ = node.vname;\n    return vnode;\n};\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 4 /* MEMBER_FLAGS.Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (propType & 2 /* MEMBER_FLAGS.Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (propType & 1 /* MEMBER_FLAGS.String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getElement = (ref) => (getHostRef(ref).$hostElement$ );\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* EVENT_FLAGS.Bubbles */),\n                composed: !!(flags & 2 /* EVENT_FLAGS.Composed */),\n                cancelable: !!(flags & 1 /* EVENT_FLAGS.Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode) => {\n    var _a;\n    const scopeId = getScopeId(cmpMeta);\n    const style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    styleElm = doc.createElement('style');\n                    styleElm.innerHTML = style;\n                    // Apply CSP nonce to the style tag if it exists\n                    const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n                    if (nonce != null) {\n                        styleElm.setAttribute('nonce', nonce);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n    if (flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n/**\n * When running a VDom render set properties present on a VDom node onto the\n * corresponding HTML element.\n *\n * Note that this function has special functionality for the `class`,\n * `style`, `key`, and `ref` attributes, as well as event handlers (like\n * `onClick`, etc). All others are just passed through as-is.\n *\n * @param elm the HTMLElement onto which attributes should be set\n * @param memberName the name of the attribute to set\n * @param oldValue the old value for the attribute\n * @param newValue the new value for the attribute\n * @param isSvg whether we're in an svg context or not\n * @param flags bitflags for Vdom variables\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (memberName === 'style') {\n            // update style attribute, css properties and values\n            {\n                for (const prop in oldValue) {\n                    if (!newValue || newValue[prop] == null) {\n                        if (prop.includes('-')) {\n                            elm.style.removeProperty(prop);\n                        }\n                        else {\n                            elm.style[prop] = '';\n                        }\n                    }\n                }\n            }\n            for (const prop in newValue) {\n                if (!oldValue || newValue[prop] !== oldValue[prop]) {\n                    if (prop.includes('-')) {\n                        elm.style.setProperty(prop, newValue[prop]);\n                    }\n                    else {\n                        elm.style[prop] = newValue[prop];\n                    }\n                }\n            }\n        }\n        else if (memberName === 'ref') {\n            // minifier will clean this up\n            if (newValue) {\n                newValue(elm);\n            }\n        }\n        else if ((!isProp ) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    if (newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else {\n        // create element\n        elm = newVNode.$elm$ = (doc.createElement(newVNode.$tag$));\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n    }\n    return elm;\n};\n/**\n * Create DOM nodes corresponding to a list of {@link d.Vnode} objects and\n * add them to the DOM in the appropriate place.\n *\n * @param parentElm the DOM node which should be used as a parent for the new\n * DOM nodes\n * @param before a child of the `parentElm` which the new children should be\n * inserted before (optional)\n * @param parentVNode the parent virtual DOM node\n * @param vnodes the new child virtual DOM nodes to produce DOM nodes for\n * @param startIdx the index in the child virtual DOM nodes at which to start\n * creating DOM nodes (inclusive)\n * @param endIdx the index in the child virtual DOM nodes at which to stop\n * creating DOM nodes (inclusive)\n */\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = (parentElm);\n    let childNode;\n    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, before);\n            }\n        }\n    }\n};\n/**\n * Remove the DOM elements corresponding to a list of {@link d.VNode} objects.\n * This can be used to, for instance, clean up after a list of children which\n * should no longer be shown.\n *\n * This function also handles some of Stencil's slot relocation logic.\n *\n * @param vnodes a list of virtual DOM nodes to remove\n * @param startIdx the index at which to start removing nodes (inclusive)\n * @param endIdx the index at which to stop removing nodes (inclusive)\n */\nconst removeVnodes = (vnodes, startIdx, endIdx) => {\n    for (let index = startIdx; index <= endIdx; ++index) {\n        const vnode = vnodes[index];\n        if (vnode) {\n            const elm = vnode.$elm$;\n            nullifyVNodeRefs(vnode);\n            if (elm) {\n                // remove the vnode's element from the dom\n                elm.remove();\n            }\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            patch(oldStartVnode, newEndVnode);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            patch(oldEndVnode, newStartVnode);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                {\n                    oldStartVnode.$elm$.parentNode.insertBefore(node, oldStartVnode.$elm$);\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false negative and then have to do needless re-rendering\n * (i.e. we'd say two VNodes aren't equal when in fact they should be).\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        return true;\n    }\n    return false;\n};\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    if (text === null) {\n        {\n            if (tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n    }\n    else if (oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\n/**\n * 'Nullify' any VDom `ref` callbacks on a VDom node or its children by\n * calling them with `null`. This signals that the DOM element corresponding to\n * the VDom node has been removed from the DOM.\n *\n * @param vNode a virtual DOM node\n */\nconst nullifyVNodeRefs = (vNode) => {\n    {\n        vNode.$attrs$ && vNode.$attrs$.ref && vNode.$attrs$.ref(null);\n        vNode.$children$ && vNode.$children$.map(nullifyVNodeRefs);\n    }\n};\n/**\n * The main entry point for Stencil's virtual DOM-based rendering engine\n *\n * Given a {@link d.HostRef} container and some virtual DOM nodes, this\n * function will handle creating a virtual DOM tree with a single root, patching\n * the current virtual DOM tree onto an old one (if any), dealing with slot\n * relocation, and reflecting attributes.\n *\n * @param hostRef data needed to root and render the virtual DOM tree, such as\n * the DOM node into which it should be rendered.\n * @param renderFnResults the virtual DOM nodes to be rendered\n * @param isInitialLoad whether or not this is the first call after page load\n */\nconst renderVdom = (hostRef, renderFnResults, isInitialLoad = false) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    // if `renderFnResults` is a Host node then we can use it directly. If not,\n    // we need to call `h` again to wrap the children of our component in a\n    // 'dummy' Host node (well, an empty vnode) since `renderVdom` assumes\n    // implicitly that the top-level vdom node is 1) an only child and 2)\n    // contains attrs that need to be set on the host element.\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    if (cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    // On the first render and *only* on the first render we want to check for\n    // any attributes set on the host element which are also set on the vdom\n    // node. If we find them, we override the value on the VDom node attrs with\n    // the value from the host element, which allows developers building apps\n    // with Stencil components to override e.g. the `role` attribute on a\n    // component even if it's already set on the `Host`.\n    if (isInitialLoad && rootVnode.$attrs$) {\n        for (const key of Object.keys(rootVnode.$attrs$)) {\n            // We have a special implementation in `setAccessor` for `style` and\n            // `class` which reconciles values coming from the VDom with values\n            // already present on the DOM element, so we don't want to override those\n            // attributes on the VDom tree with values from the host element if they\n            // are present.\n            //\n            // Likewise, `ref` and `key` are special internal values for the Stencil\n            // runtime and we don't want to override those either.\n            if (hostElm.hasAttribute(key) && !['key', 'ref', 'style', 'class'].includes(key)) {\n                rootVnode.$attrs$[key] = hostElm[key];\n            }\n        }\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\n/**\n * Dispatch initial-render and update lifecycle hooks, enqueuing calls to\n * component lifecycle methods like `componentWillLoad` as well as\n * {@link updateComponent}, which will kick off the virtual DOM re-render.\n *\n * @param hostRef a reference to a host DOM node\n * @param isInitialLoad whether we're on the initial load or not\n * @returns an empty Promise which is used to enqueue a series of operations for\n * the component\n */\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    // We're going to use this variable together with `enqueue` to implement a\n    // little promise-based queue. We start out with it `undefined`. When we add\n    // the first function to the queue we'll set this variable to be that\n    // function's return value. When we attempt to add subsequent values to the\n    // queue we'll check that value and, if it was a `Promise`, we'll then chain\n    // the new function off of that `Promise` using `.then()`. This will give our\n    // queue two nice properties:\n    //\n    // 1. If all functions added to the queue are synchronous they'll be called\n    //    synchronously right away.\n    // 2. If all functions added to the queue are asynchronous they'll all be\n    //    called in order after `dispatchHooks` exits.\n    let maybePromise;\n    if (isInitialLoad) {\n        {\n            // If `componentWillLoad` returns a `Promise` then we want to wait on\n            // whatever's going on in that `Promise` before we launch into\n            // rendering the component, doing other lifecycle stuff, etc. So\n            // in that case we assign the returned promise to the variable we\n            // declared above to hold a possible 'queueing' Promise\n            maybePromise = safeCall(instance, 'componentWillLoad');\n        }\n    }\n    {\n        maybePromise = enqueue(maybePromise, () => safeCall(instance, 'componentWillRender'));\n    }\n    endSchedule();\n    return enqueue(maybePromise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\n/**\n * This function uses a Promise to implement a simple first-in, first-out queue\n * of functions to be called.\n *\n * The queue is ordered on the basis of the first argument. If it's\n * `undefined`, then nothing is on the queue yet, so the provided function can\n * be called synchronously (although note that this function may return a\n * `Promise`). The idea is that then the return value of that enqueueing\n * operation is kept around, so that if it was a `Promise` then subsequent\n * functions can be enqueued by calling this function again with that `Promise`\n * as the first argument.\n *\n * @param maybePromise either a `Promise` which should resolve before the next function is called or an 'empty' sentinel\n * @param fn a function to enqueue\n * @returns either a `Promise` or the return value of the provided function\n */\nconst enqueue = (maybePromise, fn) => isPromisey(maybePromise) ? maybePromise.then(fn) : fn();\n/**\n * Check that a value is a `Promise`. To check, we first see if the value is an\n * instance of the `Promise` global. In a few circumstances, in particular if\n * the global has been overwritten, this is could be misleading, so we also do\n * a little 'duck typing' check to see if the `.then` property of the value is\n * defined and a function.\n *\n * @param maybePromise it might be a promise!\n * @returns whether it is or not\n */\nconst isPromisey = (maybePromise) => maybePromise instanceof Promise ||\n    (maybePromise && maybePromise.then && typeof maybePromise.then === 'function');\n/**\n * Update a component given reference to its host elements and so on.\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param isInitialLoad whether or not this function is being called as part of\n * the first render cycle\n */\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    var _a;\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance, elm, isInitialLoad);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = (_a = elm['s-p']) !== null && _a !== void 0 ? _a : [];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\n/**\n * Handle making the call to the VDom renderer with the proper context given\n * various build variables\n *\n * @param hostRef an object containing references to the element's host node,\n * VDom nodes, and other metadata\n * @param instance a reference to the underlying host element where it will be\n * rendered\n * @param elm the Host element for the component\n * @param isInitialLoad whether or not this function is being called as part of\n * @returns an empty promise\n */\nconst callRender = (hostRef, instance, elm, isInitialLoad) => {\n    try {\n        /**\n         * minification optimization: `allRenderFn` is `true` if all components have a `render`\n         * method, so we can call the method immediately. If not, check before calling it.\n         */\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance, isInitialLoad);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const instance = hostRef.$lazyInstance$ ;\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    {\n        safeCall(instance, 'componentDidRender');\n    }\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        {\n            safeCall(instance, 'componentDidLoad');\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\n/**\n * Allows to safely call a method, e.g. `componentDidLoad`, on an instance,\n * e.g. custom element node. If a build figures out that e.g. no component\n * has a `componentDidLoad` method, the instance method gets removed from the\n * output bundle and this function returns `undefined`.\n * @param instance any object that may or may not contain methods\n * @param method method name\n * @param arg single arbitrary argument\n * @returns result of method call if it exists, otherwise `undefined`\n */\nconst safeCall = (instance, method, arg) => {\n    if (instance && instance[method]) {\n        try {\n            return instance[method](arg);\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    return undefined;\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const elm = hostRef.$hostElement$ ;\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            // get an array of method names of watch functions to call\n            if (cmpMeta.$watchers$ && flags & 128 /* HOST_FLAGS.isWatchReady */) {\n                const watchMethods = cmpMeta.$watchers$[propName];\n                if (watchMethods) {\n                    // this instance is watching for when this property changed\n                    watchMethods.map((watchMethodName) => {\n                        try {\n                            // fire off each of the watch methods that are watching this property\n                            instance[watchMethodName](newVal, oldVal, propName);\n                        }\n                        catch (e) {\n                            consoleError(e, elm);\n                        }\n                    });\n                }\n            }\n            if ((flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    var _a;\n    if (cmpMeta.$members$) {\n        if (Cstr.watchers) {\n            cmpMeta.$watchers$ = Cstr.watchers;\n        }\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n        if ((flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not un-shadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to un-shadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/un-shadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    else if (propName == null) {\n                        // At this point we should know this is not a \"member\", so we can treat it like watching an attribute\n                        // on a vanilla web component\n                        const hostRef = getHostRef(this);\n                        const flags = hostRef === null || hostRef === void 0 ? void 0 : hostRef.$flags$;\n                        // We only want to trigger the callback(s) if:\n                        // 1. The instance is ready\n                        // 2. The watchers are ready\n                        // 3. The value has changed\n                        if (!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) &&\n                            flags & 128 /* HOST_FLAGS.isWatchReady */ &&\n                            newValue !== oldValue) {\n                            const instance = hostRef.$lazyInstance$ ;\n                            const entry = cmpMeta.$watchers$[attrName];\n                            entry === null || entry === void 0 ? void 0 : entry.forEach((callbackName) => {\n                                if (instance[callbackName] != null) {\n                                    instance[callbackName].call(instance, newValue, oldValue, attrName);\n                                }\n                            });\n                        }\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // Create an array of attributes to observe\n            // This list in comprised of all strings used within a `@Watch()` decorator\n            // on a component as well as any Stencil-specific \"members\" (`@Prop()`s and `@State()`s).\n            // As such, there is no way to guarantee type-safety here that a user hasn't entered\n            // an invalid attribute.\n            Cstr.observedAttributes = Array.from(new Set([\n                ...Object.keys((_a = cmpMeta.$watchers$) !== null && _a !== void 0 ? _a : {}),\n                ...members\n                    .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */)\n                    .map(([propName, m]) => {\n                    const attrName = m[1] || propName;\n                    attrNameToPropName.set(attrName, propName);\n                    if (m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {\n                        cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                    }\n                    return attrName;\n                }),\n            ]));\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        // Let the runtime know that the component has been initialized\n        hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n        {\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                // we've never proxied this Constructor before\n                // let's add the getters/setters to its prototype before\n                // the first time we create an instance of the implementation\n                {\n                    cmpMeta.$watchers$ = Cstr.watchers;\n                }\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            {\n                hostRef.$flags$ |= 128 /* HOST_FLAGS.isWatchReady */;\n            }\n            endNewInstance();\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst fireConnectedCallback = (instance) => {\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        else {\n            // fire off connectedCallback() on component instance\n            if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) ;\n            else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n                hostRef.$onReadyPromise$.then(() => fireConnectedCallback());\n            }\n        }\n        endConnected();\n    }\n};\nconst disconnectInstance = (instance) => {\n};\nconst disconnectedCallback = async (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$lazyInstance$) ;\n        else if (hostRef === null || hostRef === void 0 ? void 0 : hostRef.$onReadyPromise$) {\n            hostRef.$onReadyPromise$.then(() => disconnectInstance());\n        }\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    var _a;\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            var _a;\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            {\n                cmpMeta.$watchers$ = (_a = compactMeta[4]) !== null && _a !== void 0 ? _a : {};\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        {\n                            {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        // Apply CSP nonce to the style tag if it exists\n        const nonce = (_a = plt.$nonce$) !== null && _a !== void 0 ? _a : queryNonceMetaTagContent(doc);\n        if (nonce != null) {\n            visibilityStyle.setAttribute('nonce', nonce);\n        }\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\n/**\n * Assigns the given value to the nonce property on the runtime platform object.\n * During runtime, this value is used to set the nonce attribute on all dynamically created script and style tags.\n * @param nonce The value to be assigned to the platform nonce property.\n * @returns void\n */\nconst setNonce = (nonce) => (plt.$nonce$ = nonce);\n/**\n * A WeakMap mapping runtime component references to their corresponding host reference\n * instances.\n */\nconst hostRefs = /*@__PURE__*/ new WeakMap();\n/**\n * Given a {@link d.RuntimeRef} retrieve the corresponding {@link d.HostRef}\n *\n * @param ref the runtime ref of interest\n * @returns the Host reference (if found) or undefined\n */\nconst getHostRef = (ref) => hostRefs.get(ref);\n/**\n * Register a lazy instance with the {@link hostRefs} object so it's\n * corresponding {@link d.HostRef} can be retrieved later.\n *\n * @param lazyInstance the lazy instance of interest\n * @param hostRef that instances `HostRef` object\n * @returns a reference to the host ref WeakMap\n */\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\n/**\n * Register a host element for a Stencil component, setting up various metadata\n * and callbacks based on {@link BUILD} flags as well as the component's runtime\n * metadata.\n *\n * @param hostElement the host element to register\n * @param cmpMeta runtime metadata for that component\n * @returns a reference to the host ref WeakMap\n */\nconst registerHost = (hostElement, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: hostElement,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        hostElement['s-p'] = [];\n        hostElement['s-rc'] = [];\n    }\n    return hostRefs.set(hostElement, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { Host as H, bootstrapLazy as b, createEvent as c, getElement as g, h, promiseResolve as p, registerInstance as r, setNonce as s };\n\n//# sourceMappingURL=index-6bd070a2.js.map","import { b as bootstrapLazy } from './index-6bd070a2.js';\nexport { s as setNonce } from './index-6bd070a2.js';\n\nconst defineCustomElements = (win, options) => {\n  if (typeof window === 'undefined') return undefined;\n  return bootstrapLazy([[\"mass-icon\",[[1,\"mass-icon\",{\"iconName\":[1,\"icon-name\"],\"altText\":[1,\"alt-text\"],\"isPresentational\":[4,\"is-presentational\"],\"color\":[1],\"iconStyle\":[1,\"icon-style\"],\"opticalSize\":[2,\"optical-size\"],\"weight\":[2],\"fill\":[2],\"grade\":[2],\"svgContent\":[32]},null,{\"iconName\":[\"validateIconName\"],\"isPresentational\":[\"conditionallyRequireAltText\"]}]]],[\"mass-modal\",[[1,\"mass-modal\",{\"type\":[1],\"primaryButtonType\":[1,\"primary-button-type\"],\"primaryButtonText\":[1,\"primary-button-text\"],\"primaryButtonSize\":[1,\"primary-button-size\"],\"primaryIconPosition\":[1,\"primary-icon-position\"],\"headingText\":[1,\"heading-text\"],\"headingLevel\":[2,\"heading-level\"],\"priority\":[1],\"isOpen\":[4,\"is-open\"],\"hasSecondaryButton\":[516,\"has-secondary-button\"],\"secondaryButtonType\":[1,\"secondary-button-type\"],\"secondaryButtonText\":[1,\"secondary-button-text\"],\"secondaryButtonSize\":[1,\"secondary-button-size\"],\"secondaryIconPosition\":[1,\"secondary-icon-position\"]},null,{\"type\":[\"validateType\"],\"primaryButtonType\":[\"validatePrimaryButtonType\"],\"primaryButtonText\":[\"validatePrimaryButtonText\"],\"primaryButtonSize\":[\"validatePrimaryButtonSize\"],\"primaryIconPosition\":[\"validatePrimaryIconPosition\"],\"headingText\":[\"validateHeadingText\"],\"headingLevel\":[\"validateHeadingLevel\"],\"priority\":[\"validatePriority\"],\"secondaryButtonType\":[\"validateSecondaryButtonType\"],\"secondaryButtonText\":[\"validateSecondaryButtonText\"],\"secondaryButtonSize\":[\"validateSecondaryButtonSize\"],\"secondaryIconPosition\":[\"validateSecondaryIconPosition\"]}]]],[\"mass-notification\",[[1,\"mass-notification\",{\"headingLevel\":[2,\"heading-level\"],\"headingText\":[1,\"heading-text\"],\"iconName\":[1,\"icon-name\"],\"priority\":[1],\"altText\":[1,\"alt-text\"]},null,{\"headingLevel\":[\"validateHeadingLevel\"],\"headingText\":[\"validateHeadingText\"],\"iconName\":[\"isLowerSnakeCaseString\"],\"priority\":[\"validatePriorityLevel\"],\"altText\":[\"validateAltText\"]}]]],[\"mass-question-toggle\",[[1,\"mass-question-toggle\",{\"defaultValue\":[1,\"default-value\"],\"iconName\":[1,\"icon-name\"],\"label\":[1],\"labelId\":[1,\"label-id\"],\"optionsGroupName\":[1,\"options-group-name\"],\"optionOneLabel\":[1,\"option-one-label\"],\"optionOneValue\":[1,\"option-one-value\"],\"optionOneId\":[1,\"option-one-id\"],\"optionTwoLabel\":[1,\"option-two-label\"],\"optionTwoValue\":[1,\"option-two-value\"],\"optionTwoId\":[1,\"option-two-id\"]}]]],[\"mass-radio-group\",[[1,\"mass-radio-group\",{\"options\":[16],\"checked\":[1],\"label\":[1],\"isDisabled\":[4,\"is-disabled\"],\"isError\":[4,\"is-error\"],\"errorMsg\":[1,\"error-msg\"],\"radioId\":[1,\"radio-id\"]}]]],[\"mass-select-field\",[[1,\"mass-select-field\",{\"inputId\":[1,\"input-id\"],\"label\":[1],\"labelPosition\":[1,\"label-position\"],\"options\":[1],\"type\":[1],\"hasError\":[4,\"has-error\"],\"errorMessage\":[1,\"error-message\"],\"isDisabled\":[4,\"is-disabled\"]},null,{\"inputId\":[\"watchInputId\"],\"label\":[\"watchLabel\"],\"options\":[\"validateOptions\"]}]]],[\"mass-text-field\",[[1,\"mass-text-field\",{\"inputId\":[513,\"input-id\"],\"labelText\":[1,\"label-text\"],\"placeholderText\":[1,\"placeholder-text\"],\"inputType\":[1,\"input-type\"],\"value\":[513],\"isDisabled\":[4,\"is-disabled\"],\"isValid\":[4,\"is-valid\"],\"isRequired\":[4,\"is-required\"],\"minLength\":[2,\"min-length\"],\"maxLength\":[2,\"max-length\"],\"pattern\":[1],\"helpText\":[1,\"help-text\"],\"errorText\":[1,\"error-text\"],\"successText\":[1,\"success-text\"],\"labelPosition\":[1,\"label-position\"]},null,{\"inputId\":[\"watchInputId\"],\"labelText\":[\"watchLabelText\"],\"inputType\":[\"watchInputType\"],\"isValid\":[\"watchIsValid\"]}]]],[\"mass-textarea\",[[1,\"mass-textarea\",{\"placeholder\":[1],\"label\":[1],\"textareaId\":[1,\"textarea-id\"],\"isDisabled\":[4,\"is-disabled\"],\"isError\":[4,\"is-error\"],\"errorMsg\":[1,\"error-msg\"],\"minLength\":[2,\"min-length\"],\"maxLength\":[2,\"max-length\"],\"isRequired\":[4,\"is-required\"],\"value\":[1]}]]],[\"mass-google-map\",[[1,\"mass-google-map\",{\"center\":[16],\"coordinates\":[16],\"map\":[32],\"markers\":[32]}]]],[\"mass-image\",[[1,\"mass-image\",{\"src\":[1],\"shape\":[1],\"overlay\":[4]},null,{\"shape\":[\"validateShape\"]}]]],[\"mass-toggle\",[[1,\"mass-toggle\",{\"toggleId\":[1,\"toggle-id\"],\"isOn\":[4,\"is-on\"],\"isDisabled\":[4,\"is-disabled\"],\"activeText\":[1,\"active-text\"],\"inactiveText\":[1,\"inactive-text\"],\"_isActive\":[32]},null,{\"toggleId\":[\"validateToggleId\"],\"isOn\":[\"onIsOnChanged\"]}]]],[\"my-component\",[[1,\"my-component\",{\"first\":[1],\"middle\":[1],\"last\":[1]}]]],[\"mass-button\",[[1,\"mass-button\",{\"type\":[1],\"size\":[1],\"tone\":[1],\"iconPosition\":[513,\"icon-position\"],\"iconName\":[1,\"icon-name\"],\"iconColor\":[1,\"icon-color\"],\"iconStyle\":[1,\"icon-style\"],\"iconSize\":[2,\"icon-size\"],\"buttonText\":[513,\"button-text\"],\"buttonId\":[1,\"button-id\"],\"disabled\":[4]},null,{\"type\":[\"validateType\"],\"size\":[\"validateSize\"],\"tone\":[\"validateTone\"],\"iconPosition\":[\"validateIconPosition\"],\"iconName\":[\"validateIconName\"],\"buttonText\":[\"validateButtonText\"]}]]]], options);\n};\n\nexport { defineCustomElements };\n\n//# sourceMappingURL=loader.js.map","\n(function(){if(\"undefined\"!==typeof window&&void 0!==window.Reflect&&void 0!==window.customElements){var a=HTMLElement;window.HTMLElement=function(){return Reflect.construct(a,[],this.constructor)};HTMLElement.prototype=a.prototype;HTMLElement.prototype.constructor=HTMLElement;Object.setPrototypeOf(HTMLElement,a)}})();\nexport * from '../dist/esm/polyfills/index.js';\nexport * from '../dist/esm/loader.js';\n","/** @type { import('@storybook/web-components').Preview } */\r\nimport {defineCustomElements} from '../loader';\r\nimport '../src/common/scss/global.scss'\r\n\r\ndefineCustomElements();\r\n\r\nexport const parameters = {\r\n  controls: { hideNoControlsWarning: true }\r\n}\r\n\r\nconst preview = {\r\n  parameters: {\r\n    actions: { argTypesRegex: '^on[A-Z].*' },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/,\r\n      },\r\n    },\r\n    rem: {\r\n      sizes: [\r\n        { value: 12, title: 'XX-Small' },\r\n        { value: 14, title: 'X-Small' },\r\n        { value: 16, title: 'Normal' },\r\n        { value: 24, title: 'Large' },\r\n        { value: 32, title: 'X-Large' },\r\n        { value: 40, title: '2X-Large' },\r\n        { value: 48, title: '3X-Large' },\r\n        { value: 96, title: '4X-Large' },\r\n        { value: 160, title: '5X-Large' },\r\n      ]\r\n    },\r\n  },\r\n};\r\n\r\nexport default preview;\r\n"],"file":"assets/preview-8dc22137.js"}